{"name": "test_login[data0]", "status": "broken", "statusDetails": {"message": "TypeError: Object of type module is not JSON serializable", "trace": "self = <WEB自动化测试框架.test_case.test_login.TestLogin object at 0x00000275D0184148>\n\n    def setup(self):\n>       self.main = Main()\n\ntest_case\\test_login.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage\\basepage.py:49: in __init__\n    self._driver.get(self.base_url)\nE:\\Python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:333: in get\n    self.execute(Command.GET, {'url': url})\nE:\\Python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:319: in execute\n    response = self.command_executor.execute(driver_command, params)\nE:\\Python\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:372: in execute\n    data = utils.dump_json(params)\nE:\\Python\\lib\\site-packages\\selenium\\webdriver\\remote\\utils.py:33: in dump_json\n    return json.dumps(json_struct)\nE:\\Python\\lib\\json\\__init__.py:231: in dumps\n    return _default_encoder.encode(obj)\nE:\\Python\\lib\\json\\encoder.py:199: in encode\n    chunks = self.iterencode(o, _one_shot=True)\nE:\\Python\\lib\\json\\encoder.py:257: in iterencode\n    return _iterencode(o, 0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.encoder.JSONEncoder object at 0x00000275C8778808>\no = <module 'WEB自动化测试框架.setting' from 'E:\\\\Python_Learns\\\\WEB自动化测试框架\\\\setting.py'>\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return JSONEncoder.default(self, o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')\nE       TypeError: Object of type module is not JSON serializable\n\nE:\\Python\\lib\\json\\encoder.py:179: TypeError"}, "attachments": [{"name": "log", "source": "6d16a12a-9e1d-45c6-9c48-d4a58fee0cc1-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'case_id': 'login_case_001', 'case_title': '用户输入正确的用户名、\\n密码，点击登录', 'test_data': {'username': 'alive', 'password': 123456}, 'exp': {'by': 'xpath', 'locater': '/html/body/div[2]/div/ul[1]/div/div/a', 'exp_value': '退出'}}"}], "start": 1663486246438, "stop": 1663486246438, "uuid": "08be3948-9f98-40dc-8b9a-a35e35513a87", "historyId": "7d88344ca0847853ac3c26d02e2ca9bb", "testCaseId": "c6db3f0583de5245fe1a62b1d735a86c", "fullName": "run.TestLogin#test_login", "labels": [{"name": "suite", "value": "run"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "LAPTOP-5FKMFO0H"}, {"name": "thread", "value": "16892-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "run"}]}