{
  "uid" : "f22dfb17d532dfaf",
  "name" : "test_login[data2]",
  "fullName" : "run.TestLogin#test_login",
  "historyId" : "178f5884c0b5708ea915e2eac7a5a413",
  "time" : {
    "start" : 1663419135900,
    "stop" : 1663419140526,
    "duration" : 4626
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <WEB自动化测试框架.test_case.test_login.TestLogin object at 0x0000020787D2AC48>\ndata = {'case_id': 'login_case_002', 'case_title': '用户输入正确的用户名、\\n错误的密码，点击登录', 'exp': {'by': 'xpath', 'exp_value': '密码错误', 'locater': \"//*[@id='common-prompt']/div/p\"}, 'test_data': {'password': 1234567, 'username': 'alive'}}\n\n    @pytest.mark.parametrize('data', read_excel(setting.TEST_DATA_FILE['test_login']['file_path'],\n                                                setting.TEST_DATA_FILE['test_login']['sheet_name']['login']))\n    def test_login(self,data):\n        self.main.goto_login().login(data['test_data']['username'],data['test_data']['password'])\n        #断言\n>       self.main.should_element_contain(data['case_id'],data['exp']['by'],data['exp']['locater'],data['exp']['exp_value'])\n\ntest_case\\test_login.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage\\basepage.py:196: in should_element_contain\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <WEB自动化测试框架.page.main.Main object at 0x0000020787D255C8>, caseid = 'login_case_002', how = 'xpath', what = \"//*[@id='common-prompt']/div/p\"\nexpt = '密码错误'\n\n    def should_element_contain(self, caseid, how, what, expt):\n        '''\n        封装断言方法 --- 包含\n        :param caseid:\n        :param how:\n        :param what:\n        :param expt:\n        :return:\n        '''\n        # 通过参数how、what得到实际结果 => 元素的文本内容\n        try:\n            ele = self.get_element(how, what)\n            self.rest = ele.text\n        except Exception as e:\n            logger.exception(f'预期结果的定位元素【{what}】没找到')\n            self.sav_png()\n            raise e\n        try:\n            # 断言\n>           assert expt in self.rest\nE           AssertionError\n\npage\\basepage.py:190: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "_xunit_setup_class_fixture_TestLogin",
    "time" : {
      "start" : 1663418903696,
      "stop" : 1663418903696,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "_xunit_setup_method_fixture_TestLogin",
    "time" : {
      "start" : 1663418965455,
      "stop" : 1663419135900,
      "duration" : 170445
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <WEB自动化测试框架.test_case.test_login.TestLogin object at 0x0000020787D2AC48>\ndata = {'case_id': 'login_case_002', 'case_title': '用户输入正确的用户名、\\n错误的密码，点击登录', 'exp': {'by': 'xpath', 'exp_value': '密码错误', 'locater': \"//*[@id='common-prompt']/div/p\"}, 'test_data': {'password': 1234567, 'username': 'alive'}}\n\n    @pytest.mark.parametrize('data', read_excel(setting.TEST_DATA_FILE['test_login']['file_path'],\n                                                setting.TEST_DATA_FILE['test_login']['sheet_name']['login']))\n    def test_login(self,data):\n        self.main.goto_login().login(data['test_data']['username'],data['test_data']['password'])\n        #断言\n>       self.main.should_element_contain(data['case_id'],data['exp']['by'],data['exp']['locater'],data['exp']['exp_value'])\n\ntest_case\\test_login.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage\\basepage.py:196: in should_element_contain\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <WEB自动化测试框架.page.main.Main object at 0x0000020787D255C8>, caseid = 'login_case_002', how = 'xpath', what = \"//*[@id='common-prompt']/div/p\"\nexpt = '密码错误'\n\n    def should_element_contain(self, caseid, how, what, expt):\n        '''\n        封装断言方法 --- 包含\n        :param caseid:\n        :param how:\n        :param what:\n        :param expt:\n        :return:\n        '''\n        # 通过参数how、what得到实际结果 => 元素的文本内容\n        try:\n            ele = self.get_element(how, what)\n            self.rest = ele.text\n        except Exception as e:\n            logger.exception(f'预期结果的定位元素【{what}】没找到')\n            self.sav_png()\n            raise e\n        try:\n            # 断言\n>           assert expt in self.rest\nE           AssertionError\n\npage\\basepage.py:190: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "12f4593f7e5146e6",
      "name" : "log",
      "source" : "12f4593f7e5146e6.txt",
      "type" : "text/plain",
      "size" : 1158
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "_xunit_setup_method_fixture_TestLogin::0",
    "time" : {
      "start" : 1663419140670,
      "stop" : 1663419140670,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "_xunit_setup_class_fixture_TestLogin::0",
    "time" : {
      "start" : 1663419140670,
      "stop" : 1663419140670,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "suite",
    "value" : "run"
  }, {
    "name" : "subSuite",
    "value" : "TestLogin"
  }, {
    "name" : "host",
    "value" : "LAPTOP-5FKMFO0H"
  }, {
    "name" : "thread",
    "value" : "1372-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "run"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "data",
    "value" : "{'case_id': 'login_case_002', 'case_title': '用户输入正确的用户名、\\n错误的密码，点击登录', 'test_data': {'username': 'alive', 'password': 1234567}, 'exp': {'by': 'xpath', 'locater': \"//*[@id='common-prompt']/div/p\", 'exp_value': '密码错误'}}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "f22dfb17d532dfaf.json",
  "parameterValues" : [ "{'case_id': 'login_case_002', 'case_title': '用户输入正确的用户名、\\n错误的密码，点击登录', 'test_data': {'username': 'alive', 'password': 1234567}, 'exp': {'by': 'xpath', 'locater': \"//*[@id='common-prompt']/div/p\", 'exp_value': '密码错误'}}" ]
}